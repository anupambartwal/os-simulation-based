//#include <bits/stdc++.h>
#include<stdio.h>
// here we creating a strucure of a process
struct process 
{
    int id;
    int B;
    int Bbackup;   // its is for backup purpose to print in last
    int W;
    int T;
    int C;
};
// here we creating object's array for 3 processes.
struct process p[3];

// its variable to find the total time
int totaltime = 0;
int prefinaltotal = 0;

// comparator function for sort()
int compare(struct process p1,struC process p2)
{
    // compare the id of two processes to break tie
    return p1.id< p2.id;
}

// computing the largest burst Time among all the available processes
int findlargest()
{
    int max = 0, i;
    for (i = 0; i < 3; i++)
    {
        if (p[i].B > p[max].B)
            max = i;
        else if(p[max].B==p[i].B)
        {
            if(compare(p[i],p[max]))
                max=i;
        }
        else
            continue;
    }
    // returning the index of the process having the largest B
    return max;
}
// function find completion time of each process
void findC()
{
    int index;
    int flag = 0;
    while (1)
    {
        index = findlargest();
        printf("Process executing at time %d is: P%d\n",totaltime,index + 1);
        p[index].B -= 1;
        totaltime += 1;
        if (p[index].B == 0)
        {
            p[index].C = totaltime;
            printf(" Process P%d is completed at %d\n",p[index].id,totaltime);
        }
        // loop termination condition
        if (totaltime == prefinaltotal)
            break;
    }
}


int main()
{

    int i;

    // initializing the process number
    p[0].id=2132;
    p[1].id=2102;
    p[2].id=2453;

    p[0].B=2;
    p[1].B=4;
    p[2].B=8;
    for (i = 0; i < 3; i++)
    {
        // backup for displaying the output in last
        // calculating total required time for terminating the funCion
        p[i].Bbackup = p[i].B;
        prefinaltotal += p[i].B;
    }

    // displaying the process before executing
    printf("PNo\tID\tB\n");

    for (i = 0; i < 3; i++) 
    {
           printf("%d\t%d\t%d\n",i+1, p[i].id, p[i].B);
    }
    printf("\n");
    // calculating initial time when execution starts
    totaltime += 0;
    // calculating to terminate loop

    prefinaltotal += 0;
    findC();
    int totalW = 0;
    int totalT = 0;
    for (i = 0; i < 3; i++) 
    {
        // since, T = C - AT
        p[i].T = p[i].C;
        p[i].W = p[i].T - p[i].Bbackup;

        // here finding total waiting time
        totalW += p[i].W;

        // finding total turn around time
        totalT += p[i].T;
    }

    printf("After Execution of all processes..\n");

    // after all process executes
    printf("PNo\tID\tB\tC\tT\tW\n");

    for (i = 0; i < 3; i++)
    {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n",i+1,p[i].id,p[i].Bbackup,p[i].C,p[i].T,p[i].W);
    }
    printf("\nTotal T = %d\n",totalT);
    printf("Average T = %f\n",totalT/4.0);
    printf("Total W = %d\n",totalW);
    printf("Average W = %f\n",totalW / 4.0);
    return 0;
}
